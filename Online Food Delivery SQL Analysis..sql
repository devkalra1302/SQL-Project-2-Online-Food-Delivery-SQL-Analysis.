-- ğŸ’¼ SQL Project 2: Online Food Delivery SQL Analysis.




-- ğŸ“Œ Domain: Food Delivery (Swiggy/Zomato-style)
-- ğŸ“Œ Tools Used: SQL (PostgreSQL/MySQL compatible)
-- ğŸ“Œ Dataset Format: CSV (downloadable at end)
-- ğŸ“Œ Skill Level: Beginner â†’ Intermediate â†’ Advanced
-- ğŸ“Œ Focus Areas: Joins, Aggregations, CTEs, Window Functions, Customer & Revenue Analytics




-- ğŸ§¾ Project Description
-- You are working as a Data Analyst at a food delivery startup. The company operates in major Indian cities and wants data-driven insights
-- about customers, restaurants, sales, delivery patterns, and business growth.



-- Your task is to write SQL queries to analyze the companyâ€™s performance and customer behavior using the given dataset.




CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    city VARCHAR(100)
);




CREATE TABLE restaurants (
    restaurant_id INT PRIMARY KEY,
    restaurant_name VARCHAR(100),
    city VARCHAR(100)
);




CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    restaurant_id INT,
    order_date DATE,
    delivery_time_mins INT,
    delivery_status VARCHAR(50),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
    FOREIGN KEY (restaurant_id) REFERENCES restaurants(restaurant_id)
);




CREATE TABLE order_items (
    order_item_id INT PRIMARY KEY,
    order_id INT,
    item_name VARCHAR(100),
    item_price NUMERIC(10,2),
    FOREIGN KEY (order_id) REFERENCES orders(order_id)
);




SELECT * FROM customers
SELECT * FROM restaurants
SELECT * FROM orders
SELECT * FROM order_items





-- ğŸŸ¢ BASIC QUERIES




-- 1 -  List all orders with customer name, restaurant name, and order date.


SELECT o.order_id , c.customer_name , r.restaurant_name , o.order_date
FROM orders o
JOIN customers c 
ON o.customer_id = c.customer_id
JOIN restaurants r 
ON o.restaurant_id = r.restaurant_id;


-- 2 - Find the total number of orders placed by each customer.


SELECT COUNT(o.order_id) as Total_orders ,c.customer_name
FROM orders o
JOIN customers c 
ON o.customer_id = c.customer_id
GROUP BY c.customer_name;


-- 3 - List the top 5 most frequently ordered items.


SELECT item_name
FROM order_items
GROUP BY item_name
ORDER BY item_name DESC
LIMIT 5;


-- 4 - Find total revenue generated by each restaurant.


SELECT SUM(oi.item_price) AS Total_Revenue , r.restaurant_name
FROM restaurants r
JOIN orders o 
ON r.restaurant_id = o.order_id
JOIN order_items oi
ON o.order_id = oi.order_id
GROUP BY r.restaurant_name
ORDER BY Total_Revenue desc;


-- 5 - List all orders that were delayed or cancelled.


SELECT order_id , delivery_status
FROM orders 
WHERE delivery_status IN ('Delayed' , 'Cancelled');




-- ğŸŸ¡ INTERMEDIATE QUERIES.




-- 6 - Which city has the highest number of total orders?


SELECT c.city , COUNT(o.order_id) AS total_orders
FROM customers c
JOIN orders o
ON c.customer_id = o.customer_id
GROUP BY c.city
ORDER BY total_orders DESC
LIMIT 1;


-- 7 - Find the average delivery time per restaurant.


SELECT r.restaurant_name , AVG(o.delivery_time_mins) AS Average_Time
FROM restaurants r
JOIN orders o 
ON r.restaurant_id = o.restaurant_id
GROUP BY r.restaurant_name;


-- 8 - List customers who have spent more than â‚¹2000 in total.


SELECT 
    c.customer_name,
    SUM(oi.item_price) AS total_spent
FROM 
    customers c
JOIN 
    orders o ON c.customer_id = o.customer_id
JOIN 
    order_items oi ON o.order_id = oi.order_id
GROUP BY 
    c.customer_name
HAVING 
    SUM(oi.item_price) > 2000;


-- 9 - What is the most popular item in each city?


WITH ItemCounts AS (
    SELECT 
        c.city,
        oi.item_name,
        COUNT(*) AS item_count,
        ROW_NUMBER() OVER (PARTITION BY c.city ORDER BY COUNT(*) DESC) AS rn
    FROM 
        customers c
    JOIN 
        orders o ON c.customer_id = o.customer_id
    JOIN 
        order_items oi ON o.order_id = oi.order_id
    GROUP BY 
        c.city, oi.item_name
)SELECT 
    city, 
    item_name AS most_popular_item,
    item_count
FROM 
    ItemCounts
WHERE 
    rn = 1;


-- 10 - Show how many orders were placed in each month.


SELECT 
    DATE_TRUNC('month', order_date) AS Month,
    COUNT(order_id) AS total_orders
FROM 
    orders
GROUP BY 
    DATE_TRUNC('month', order_date)
ORDER BY 
    Month;




ğŸ”´ ADVANCED QUERIES.




-- 11 - Rank customers based on their total spending using a window function.


SELECT c.customer_name , 
       SUM(oi.item_price) AS total_spent,
       RANK() OVER(
	   ORDER BY SUM(oi.item_price) DESC 
	   ) AS ranked_customers
FROM 
    customers c
JOIN 
    orders o ON c.customer_id = o.customer_id
JOIN 
    order_items oi ON o.order_id = oi.order_id
GROUP BY 
    c.customer_name
ORDER BY
    ranked_customers;


-- 12 - Calculate the running total of orders day-wise.


SELECT 
    o.order_date,
    SUM(oi.item_price) AS daily_total,
    SUM(SUM(oi.item_price)) OVER (ORDER BY o.order_date) AS running_total
FROM 
    orders o
JOIN 
    order_items oi 
ON 
    o.order_id = oi.order_id
GROUP BY 
    o.order_date
ORDER BY 
    o.order_date;


-- 13 - Identify repeat customers (those who ordered more than once).


SELECT customer_id,
    COUNT(order_id) AS total_orders
FROM 
    orders
GROUP BY 
    customer_id
HAVING 
    COUNT(order_id) > 1;


-- 14 - Use a CTE to calculate total revenue per restaurant, and filter restaurants earning more than â‚¹5000.


WITH total_revenue_cte AS (
    SELECT 
        r.restaurant_name,
        SUM(oi.item_price) AS total_revenue
    FROM 
        restaurants r
    JOIN 
        orders o ON r.restaurant_id = o.restaurant_id
    JOIN 
        order_items oi ON o.order_id = oi.order_id
    GROUP BY 
        r.restaurant_name
)

SELECT 
    restaurant_name,
    total_revenue
FROM 
    total_revenue_cte
WHERE 
    total_revenue > 5000;


-- 15 - Find the highest single-day revenue (best sales day ever).


SELECT SUM(item_price) AS total_revenue , order_id
FROM order_items
GROUP BY order_id
ORDER BY total_revenue DESC 
LIMIT 1;


-- 16 - Find customers who placed another order within 30 days of their first order (retention logic).


SELECT DISTINCT o1.customer_id
FROM orders o1
JOIN orders o2 
  ON o1.customer_id = o2.customer_id
WHERE o2.order_date > o1.order_date
  AND o2.order_date <= o1.order_date + INTERVAL '30 days';





